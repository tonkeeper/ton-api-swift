//
// AccountsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccountsAPI {

    /**

     - parameter accountId: (path) account ID 
     - returns: DomainNames
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func accountDnsBackResolve(accountId: String) async throws -> DomainNames {
        return try await accountDnsBackResolveWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/dns/backresolve
     - Get account's domains
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<DomainNames> 
     */
    open class func accountDnsBackResolveWithRequestBuilder(accountId: String) -> RequestBuilder<DomainNames> {
        var localVariablePath = "/v2/accounts/{account_id}/dns/backresolve"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DomainNames>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter gaslessEstimateRequestMessagesInner: (body) bag-of-cells serialized to hex 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter ignoreSignatureCheck: (query)  (optional)
     - returns: AccountEvent
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func emulateMessageToAccountEvent(accountId: String, gaslessEstimateRequestMessagesInner: GaslessEstimateRequestMessagesInner, acceptLanguage: String? = nil, ignoreSignatureCheck: Bool? = nil) async throws -> AccountEvent {
        return try await emulateMessageToAccountEventWithRequestBuilder(accountId: accountId, gaslessEstimateRequestMessagesInner: gaslessEstimateRequestMessagesInner, acceptLanguage: acceptLanguage, ignoreSignatureCheck: ignoreSignatureCheck).execute().body
    }

    /**
     - POST /v2/accounts/{account_id}/events/emulate
     - Emulate sending message to retrieve account-specific events
     - parameter accountId: (path) account ID 
     - parameter gaslessEstimateRequestMessagesInner: (body) bag-of-cells serialized to hex 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter ignoreSignatureCheck: (query)  (optional)
     - returns: RequestBuilder<AccountEvent> 
     */
    open class func emulateMessageToAccountEventWithRequestBuilder(accountId: String, gaslessEstimateRequestMessagesInner: GaslessEstimateRequestMessagesInner, acceptLanguage: String? = nil, ignoreSignatureCheck: Bool? = nil) -> RequestBuilder<AccountEvent> {
        var localVariablePath = "/v2/accounts/{account_id}/events/emulate"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gaslessEstimateRequestMessagesInner)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ignore_signature_check": (wrappedValue: ignoreSignatureCheck?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountEvent>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: Account
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccount(accountId: String) async throws -> Account {
        return try await getAccountWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}
     - Get human-friendly information about an account without low-level details.
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<Account> 
     */
    open class func getAccountWithRequestBuilder(accountId: String) -> RequestBuilder<Account> {
        var localVariablePath = "/v2/accounts/{account_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Account>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: GetAccountDiff200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountDiff(accountId: String, startDate: Int64, endDate: Int64) async throws -> GetAccountDiff200Response {
        return try await getAccountDiffWithRequestBuilder(accountId: accountId, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/diff
     - Get account's balance change
     - parameter accountId: (path) account ID 
     - parameter startDate: (query)  
     - parameter endDate: (query)  
     - returns: RequestBuilder<GetAccountDiff200Response> 
     */
    open class func getAccountDiffWithRequestBuilder(accountId: String, startDate: Int64, endDate: Int64) -> RequestBuilder<GetAccountDiff200Response> {
        var localVariablePath = "/v2/accounts/{account_id}/diff"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start_date": (wrappedValue: startDate.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAccountDiff200Response>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter period: (query) number of days before expiration (optional)
     - returns: DnsExpiring
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountDnsExpiring(accountId: String, period: Int? = nil) async throws -> DnsExpiring {
        return try await getAccountDnsExpiringWithRequestBuilder(accountId: accountId, period: period).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/dns/expiring
     - Get expiring account .ton dns
     - parameter accountId: (path) account ID 
     - parameter period: (query) number of days before expiration (optional)
     - returns: RequestBuilder<DnsExpiring> 
     */
    open class func getAccountDnsExpiringWithRequestBuilder(accountId: String, period: Int? = nil) -> RequestBuilder<DnsExpiring> {
        var localVariablePath = "/v2/accounts/{account_id}/dns/expiring"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "period": (wrappedValue: period?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DnsExpiring>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter eventId: (path) event ID or transaction hash in hex (without 0x) or base64url format 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter subjectOnly: (query) filter actions where requested account is not real subject (for example sender or receiver jettons) (optional, default to false)
     - returns: AccountEvent
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountEvent(accountId: String, eventId: String, acceptLanguage: String? = nil, subjectOnly: Bool? = nil) async throws -> AccountEvent {
        return try await getAccountEventWithRequestBuilder(accountId: accountId, eventId: eventId, acceptLanguage: acceptLanguage, subjectOnly: subjectOnly).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/events/{event_id}
     - Get event for an account by event_id
     - parameter accountId: (path) account ID 
     - parameter eventId: (path) event ID or transaction hash in hex (without 0x) or base64url format 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter subjectOnly: (query) filter actions where requested account is not real subject (for example sender or receiver jettons) (optional, default to false)
     - returns: RequestBuilder<AccountEvent> 
     */
    open class func getAccountEventWithRequestBuilder(accountId: String, eventId: String, acceptLanguage: String? = nil, subjectOnly: Bool? = nil) -> RequestBuilder<AccountEvent> {
        var localVariablePath = "/v2/accounts/{account_id}/events/{event_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_id}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subject_only": (wrappedValue: subjectOnly?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountEvent>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter initiator: (query) Show only events that are initiated by this account (optional, default to false)
     - parameter subjectOnly: (query) filter actions where requested account is not real subject (for example sender or receiver jettons) (optional, default to false)
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: AccountEvents
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountEvents(accountId: String, limit: Int, acceptLanguage: String? = nil, initiator: Bool? = nil, subjectOnly: Bool? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) async throws -> AccountEvents {
        return try await getAccountEventsWithRequestBuilder(accountId: accountId, limit: limit, acceptLanguage: acceptLanguage, initiator: initiator, subjectOnly: subjectOnly, beforeLt: beforeLt, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/events
     - Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter initiator: (query) Show only events that are initiated by this account (optional, default to false)
     - parameter subjectOnly: (query) filter actions where requested account is not real subject (for example sender or receiver jettons) (optional, default to false)
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: RequestBuilder<AccountEvents> 
     */
    open class func getAccountEventsWithRequestBuilder(accountId: String, limit: Int, acceptLanguage: String? = nil, initiator: Bool? = nil, subjectOnly: Bool? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<AccountEvents> {
        var localVariablePath = "/v2/accounts/{account_id}/events"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "initiator": (wrappedValue: initiator?.encodeToJSON(), isExplode: false),
            "subject_only": (wrappedValue: subjectOnly?.encodeToJSON(), isExplode: true),
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
            "start_date": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountEvents>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter id: (path) extra currency id 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: AccountEvents
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountExtraCurrencyHistoryByID(accountId: String, id: Int, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) async throws -> AccountEvents {
        return try await getAccountExtraCurrencyHistoryByIDWithRequestBuilder(accountId: accountId, id: id, limit: limit, acceptLanguage: acceptLanguage, beforeLt: beforeLt, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/extra-currency/{id}/history
     - Get the transfer history of extra currencies for an account.
     - parameter accountId: (path) account ID 
     - parameter id: (path) extra currency id 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: RequestBuilder<AccountEvents> 
     */
    open class func getAccountExtraCurrencyHistoryByIDWithRequestBuilder(accountId: String, id: Int, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<AccountEvents> {
        var localVariablePath = "/v2/accounts/{account_id}/extra-currency/{id}/history"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
            "start_date": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountEvents>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - parameter currencies: (query) accept ton and all possible fiat currencies, separated by commas (optional)
     - parameter supportedExtensions: (query) comma separated list supported extensions (optional)
     - returns: JettonBalance
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountJettonBalance(accountId: String, jettonId: String, currencies: [String]? = nil, supportedExtensions: [String]? = nil) async throws -> JettonBalance {
        return try await getAccountJettonBalanceWithRequestBuilder(accountId: accountId, jettonId: jettonId, currencies: currencies, supportedExtensions: supportedExtensions).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/jettons/{jetton_id}
     - Get Jetton balance by owner address
     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - parameter currencies: (query) accept ton and all possible fiat currencies, separated by commas (optional)
     - parameter supportedExtensions: (query) comma separated list supported extensions (optional)
     - returns: RequestBuilder<JettonBalance> 
     */
    open class func getAccountJettonBalanceWithRequestBuilder(accountId: String, jettonId: String, currencies: [String]? = nil, supportedExtensions: [String]? = nil) -> RequestBuilder<JettonBalance> {
        var localVariablePath = "/v2/accounts/{account_id}/jettons/{jetton_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let jettonIdPreEscape = "\(APIHelper.mapValueToPathItem(jettonId))"
        let jettonIdPostEscape = jettonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jetton_id}", with: jettonIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencies": (wrappedValue: currencies?.encodeToJSON(), isExplode: false),
            "supported_extensions": (wrappedValue: supportedExtensions?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonBalance>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: AccountEvents
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountJettonHistoryByID(accountId: String, jettonId: String, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) async throws -> AccountEvents {
        return try await getAccountJettonHistoryByIDWithRequestBuilder(accountId: accountId, jettonId: jettonId, limit: limit, acceptLanguage: acceptLanguage, beforeLt: beforeLt, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/jettons/{jetton_id}/history
     - Please use `getJettonAccountHistoryByID`` instead
     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: RequestBuilder<AccountEvents> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getAccountJettonHistoryByIDWithRequestBuilder(accountId: String, jettonId: String, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<AccountEvents> {
        var localVariablePath = "/v2/accounts/{account_id}/jettons/{jetton_id}/history"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let jettonIdPreEscape = "\(APIHelper.mapValueToPathItem(jettonId))"
        let jettonIdPostEscape = jettonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jetton_id}", with: jettonIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
            "start_date": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountEvents>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter currencies: (query) accept ton and all possible fiat currencies, separated by commas (optional)
     - parameter supportedExtensions: (query) comma separated list supported extensions (optional)
     - returns: JettonsBalances
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountJettonsBalances(accountId: String, currencies: [String]? = nil, supportedExtensions: [String]? = nil) async throws -> JettonsBalances {
        return try await getAccountJettonsBalancesWithRequestBuilder(accountId: accountId, currencies: currencies, supportedExtensions: supportedExtensions).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/jettons
     - Get all Jettons balances by owner address
     - parameter accountId: (path) account ID 
     - parameter currencies: (query) accept ton and all possible fiat currencies, separated by commas (optional)
     - parameter supportedExtensions: (query) comma separated list supported extensions (optional)
     - returns: RequestBuilder<JettonsBalances> 
     */
    open class func getAccountJettonsBalancesWithRequestBuilder(accountId: String, currencies: [String]? = nil, supportedExtensions: [String]? = nil) -> RequestBuilder<JettonsBalances> {
        var localVariablePath = "/v2/accounts/{account_id}/jettons"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currencies": (wrappedValue: currencies?.encodeToJSON(), isExplode: false),
            "supported_extensions": (wrappedValue: supportedExtensions?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonsBalances>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - returns: JettonOperations
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountJettonsHistory(accountId: String, limit: Int, beforeLt: Int64? = nil) async throws -> JettonOperations {
        return try await getAccountJettonsHistoryWithRequestBuilder(accountId: accountId, limit: limit, beforeLt: beforeLt).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/jettons/history
     - Get the transfer jettons history for account
     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - returns: RequestBuilder<JettonOperations> 
     */
    open class func getAccountJettonsHistoryWithRequestBuilder(accountId: String, limit: Int, beforeLt: Int64? = nil) -> RequestBuilder<JettonOperations> {
        var localVariablePath = "/v2/accounts/{account_id}/jettons/history"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonOperations>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: Multisigs
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountMultisigs(accountId: String) async throws -> Multisigs {
        return try await getAccountMultisigsWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/multisigs
     - Get account's multisigs
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<Multisigs> 
     */
    open class func getAccountMultisigsWithRequestBuilder(accountId: String) -> RequestBuilder<Multisigs> {
        var localVariablePath = "/v2/accounts/{account_id}/multisigs"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Multisigs>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter collection: (query) nft collection (optional)
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - parameter indirectOwnership: (query) Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly. (optional, default to false)
     - returns: NftItems
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountNftItems(accountId: String, collection: String? = nil, limit: Int? = nil, offset: Int? = nil, indirectOwnership: Bool? = nil) async throws -> NftItems {
        return try await getAccountNftItemsWithRequestBuilder(accountId: accountId, collection: collection, limit: limit, offset: offset, indirectOwnership: indirectOwnership).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/nfts
     - Get all NFT items by owner address
     - parameter accountId: (path) account ID 
     - parameter collection: (query) nft collection (optional)
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - parameter indirectOwnership: (query) Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly. (optional, default to false)
     - returns: RequestBuilder<NftItems> 
     */
    open class func getAccountNftItemsWithRequestBuilder(accountId: String, collection: String? = nil, limit: Int? = nil, offset: Int? = nil, indirectOwnership: Bool? = nil) -> RequestBuilder<NftItems> {
        var localVariablePath = "/v2/accounts/{account_id}/nfts"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "collection": (wrappedValue: collection?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "indirect_ownership": (wrappedValue: indirectOwnership?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftItems>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: GetAccountPublicKey200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountPublicKey(accountId: String) async throws -> GetAccountPublicKey200Response {
        return try await getAccountPublicKeyWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/publickey
     - Get public key by account id
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<GetAccountPublicKey200Response> 
     */
    open class func getAccountPublicKeyWithRequestBuilder(accountId: String) -> RequestBuilder<GetAccountPublicKey200Response> {
        var localVariablePath = "/v2/accounts/{account_id}/publickey"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAccountPublicKey200Response>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: Subscriptions
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountSubscriptions(accountId: String) async throws -> Subscriptions {
        return try await getAccountSubscriptionsWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/subscriptions
     - Get all subscriptions by wallet address
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<Subscriptions> 
     */
    open class func getAccountSubscriptionsWithRequestBuilder(accountId: String) -> RequestBuilder<Subscriptions> {
        var localVariablePath = "/v2/accounts/{account_id}/subscriptions"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Subscriptions>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter limit: (query)  (optional, default to 100)
     - returns: TraceIDs
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountTraces(accountId: String, beforeLt: Int64? = nil, limit: Int? = nil) async throws -> TraceIDs {
        return try await getAccountTracesWithRequestBuilder(accountId: accountId, beforeLt: beforeLt, limit: limit).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/traces
     - Get traces for account
     - parameter accountId: (path) account ID 
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter limit: (query)  (optional, default to 100)
     - returns: RequestBuilder<TraceIDs> 
     */
    open class func getAccountTracesWithRequestBuilder(accountId: String, beforeLt: Int64? = nil, limit: Int? = nil) -> RequestBuilder<TraceIDs> {
        var localVariablePath = "/v2/accounts/{account_id}/traces"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TraceIDs>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter currency: (query)  (optional)
     - parameter getAccountsRequest: (body) a list of account ids (optional)
     - returns: Accounts
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccounts(currency: String? = nil, getAccountsRequest: GetAccountsRequest? = nil) async throws -> Accounts {
        return try await getAccountsWithRequestBuilder(currency: currency, getAccountsRequest: getAccountsRequest).execute().body
    }

    /**
     - POST /v2/accounts/_bulk
     - Get human-friendly information about several accounts without low-level details.
     - parameter currency: (query)  (optional)
     - parameter getAccountsRequest: (body) a list of account ids (optional)
     - returns: RequestBuilder<Accounts> 
     */
    open class func getAccountsWithRequestBuilder(currency: String? = nil, getAccountsRequest: GetAccountsRequest? = nil) -> RequestBuilder<Accounts> {
        let localVariablePath = "/v2/accounts/_bulk"
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAccountsRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "currency": (wrappedValue: currency?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Accounts>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - parameter limit: (query)  
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: JettonOperations
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJettonAccountHistoryByID(accountId: String, jettonId: String, limit: Int, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) async throws -> JettonOperations {
        return try await getJettonAccountHistoryByIDWithRequestBuilder(accountId: accountId, jettonId: jettonId, limit: limit, beforeLt: beforeLt, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     - GET /v2/jettons/{jetton_id}/accounts/{account_id}/history
     - Get the transfer jetton history for account and jetton
     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - parameter limit: (query)  
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: RequestBuilder<JettonOperations> 
     */
    open class func getJettonAccountHistoryByIDWithRequestBuilder(accountId: String, jettonId: String, limit: Int, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<JettonOperations> {
        var localVariablePath = "/v2/jettons/{jetton_id}/accounts/{account_id}/history"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let jettonIdPreEscape = "\(APIHelper.mapValueToPathItem(jettonId))"
        let jettonIdPostEscape = jettonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jetton_id}", with: jettonIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
            "start_date": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonOperations>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func reindexAccount(accountId: String) async throws {
        return try await reindexAccountWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - POST /v2/accounts/{account_id}/reindex
     - Update internal cache for a particular account
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<Void> 
     */
    open class func reindexAccountWithRequestBuilder(accountId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v2/accounts/{account_id}/reindex"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = TonAPIAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter name: (query)  
     - returns: FoundAccounts
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchAccounts(name: String) async throws -> FoundAccounts {
        return try await searchAccountsWithRequestBuilder(name: name).execute().body
    }

    /**
     - GET /v2/accounts/search
     - Search by account domain name
     - parameter name: (query)  
     - returns: RequestBuilder<FoundAccounts> 
     */
    open class func searchAccountsWithRequestBuilder(name: String) -> RequestBuilder<FoundAccounts> {
        let localVariablePath = "/v2/accounts/search"
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": (wrappedValue: name.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FoundAccounts>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
