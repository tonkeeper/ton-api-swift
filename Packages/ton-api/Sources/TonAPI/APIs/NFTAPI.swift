//
// NFTAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NFTAPI {

    /**

     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - returns: NftOperations
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountNftHistory(accountId: String, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil) async throws -> NftOperations {
        return try await getAccountNftHistoryWithRequestBuilder(accountId: accountId, limit: limit, acceptLanguage: acceptLanguage, beforeLt: beforeLt).execute().body
    }

    /**
     - GET /v2/accounts/{account_id}/nfts/history
     - Get the transfer nft history
     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - returns: RequestBuilder<NftOperations> 
     */
    open class func getAccountNftHistoryWithRequestBuilder(accountId: String, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil) -> RequestBuilder<NftOperations> {
        var localVariablePath = "/v2/accounts/{account_id}/nfts/history"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftOperations>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - returns: NftItems
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getItemsFromCollection(accountId: String, limit: Int? = nil, offset: Int? = nil) async throws -> NftItems {
        return try await getItemsFromCollectionWithRequestBuilder(accountId: accountId, limit: limit, offset: offset).execute().body
    }

    /**
     - GET /v2/nfts/collections/{account_id}/items
     - Get NFT items from collection by collection address
     - parameter accountId: (path) account ID 
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - returns: RequestBuilder<NftItems> 
     */
    open class func getItemsFromCollectionWithRequestBuilder(accountId: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<NftItems> {
        var localVariablePath = "/v2/nfts/collections/{account_id}/items"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftItems>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: NftCollection
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNftCollection(accountId: String) async throws -> NftCollection {
        return try await getNftCollectionWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/nfts/collections/{account_id}
     - Get NFT collection by collection address
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<NftCollection> 
     */
    open class func getNftCollectionWithRequestBuilder(accountId: String) -> RequestBuilder<NftCollection> {
        var localVariablePath = "/v2/nfts/collections/{account_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftCollection>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getAccountsRequest: (body) a list of account ids (optional)
     - returns: NftCollections
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNftCollectionItemsByAddresses(getAccountsRequest: GetAccountsRequest? = nil) async throws -> NftCollections {
        return try await getNftCollectionItemsByAddressesWithRequestBuilder(getAccountsRequest: getAccountsRequest).execute().body
    }

    /**
     - POST /v2/nfts/collections/_bulk
     - Get NFT collection items by their addresses
     - parameter getAccountsRequest: (body) a list of account ids (optional)
     - returns: RequestBuilder<NftCollections> 
     */
    open class func getNftCollectionItemsByAddressesWithRequestBuilder(getAccountsRequest: GetAccountsRequest? = nil) -> RequestBuilder<NftCollections> {
        let localVariablePath = "/v2/nfts/collections/_bulk"
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAccountsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftCollections>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter limit: (query)  (optional, default to 100)
     - parameter offset: (query)  (optional, default to 0)
     - returns: NftCollections
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNftCollections(limit: Int? = nil, offset: Int? = nil) async throws -> NftCollections {
        return try await getNftCollectionsWithRequestBuilder(limit: limit, offset: offset).execute().body
    }

    /**
     - GET /v2/nfts/collections
     - Get NFT collections
     - parameter limit: (query)  (optional, default to 100)
     - parameter offset: (query)  (optional, default to 0)
     - returns: RequestBuilder<NftCollections> 
     */
    open class func getNftCollectionsWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<NftCollections> {
        let localVariablePath = "/v2/nfts/collections"
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftCollections>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: AccountEvents
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNftHistoryByID(accountId: String, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) async throws -> AccountEvents {
        return try await getNftHistoryByIDWithRequestBuilder(accountId: accountId, limit: limit, acceptLanguage: acceptLanguage, beforeLt: beforeLt, startDate: startDate, endDate: endDate).execute().body
    }

    /**
     - GET /v2/nfts/{account_id}/history
     - Please use `getAccountNftHistory`` instead
     - parameter accountId: (path) account ID 
     - parameter limit: (query)  
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - parameter beforeLt: (query) omit this parameter to get last events (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - returns: RequestBuilder<AccountEvents> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getNftHistoryByIDWithRequestBuilder(accountId: String, limit: Int, acceptLanguage: String? = nil, beforeLt: Int64? = nil, startDate: Int64? = nil, endDate: Int64? = nil) -> RequestBuilder<AccountEvents> {
        var localVariablePath = "/v2/nfts/{account_id}/history"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "before_lt": (wrappedValue: beforeLt?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit.encodeToJSON(), isExplode: true),
            "start_date": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccountEvents>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: NftItem
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNftItemByAddress(accountId: String) async throws -> NftItem {
        return try await getNftItemByAddressWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/nfts/{account_id}
     - Get NFT item by its address
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<NftItem> 
     */
    open class func getNftItemByAddressWithRequestBuilder(accountId: String) -> RequestBuilder<NftItem> {
        var localVariablePath = "/v2/nfts/{account_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftItem>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getAccountsRequest: (body) a list of account ids (optional)
     - returns: NftItems
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getNftItemsByAddresses(getAccountsRequest: GetAccountsRequest? = nil) async throws -> NftItems {
        return try await getNftItemsByAddressesWithRequestBuilder(getAccountsRequest: getAccountsRequest).execute().body
    }

    /**
     - POST /v2/nfts/_bulk
     - Get NFT items by their addresses
     - parameter getAccountsRequest: (body) a list of account ids (optional)
     - returns: RequestBuilder<NftItems> 
     */
    open class func getNftItemsByAddressesWithRequestBuilder(getAccountsRequest: GetAccountsRequest? = nil) -> RequestBuilder<NftItems> {
        let localVariablePath = "/v2/nfts/_bulk"
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAccountsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NftItems>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
