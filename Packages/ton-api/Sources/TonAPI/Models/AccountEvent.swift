//
// AccountEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time. */
public struct AccountEvent: Codable, JSONEncodable, Hashable {

    public var eventId: String
    public var account: AccountAddress
    public var timestamp: Int64
    public var actions: [Action]
    /** scam */
    public var isScam: Bool
    public var lt: Int64
    /** Event is not finished yet. Transactions still happening */
    public var inProgress: Bool
    /** Progress of the event (0.0 - 1.0) */
    public var progress: Double?
    /** TODO */
    public var extra: Int64

    public init(eventId: String, account: AccountAddress, timestamp: Int64, actions: [Action], isScam: Bool, lt: Int64, inProgress: Bool, progress: Double? = nil, extra: Int64) {
        self.eventId = eventId
        self.account = account
        self.timestamp = timestamp
        self.actions = actions
        self.isScam = isScam
        self.lt = lt
        self.inProgress = inProgress
        self.progress = progress
        self.extra = extra
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case account
        case timestamp
        case actions
        case isScam = "is_scam"
        case lt
        case inProgress = "in_progress"
        case progress
        case extra
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(account, forKey: .account)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(actions, forKey: .actions)
        try container.encode(isScam, forKey: .isScam)
        try container.encode(lt, forKey: .lt)
        try container.encode(inProgress, forKey: .inProgress)
        try container.encodeIfPresent(progress, forKey: .progress)
        try container.encode(extra, forKey: .extra)
    }
}

