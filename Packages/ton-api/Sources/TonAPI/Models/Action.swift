//
// Action.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Action: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case tonTransfer = "TonTransfer"
        case extraCurrencyTransfer = "ExtraCurrencyTransfer"
        case jettonTransfer = "JettonTransfer"
        case jettonBurn = "JettonBurn"
        case jettonMint = "JettonMint"
        case nftItemTransfer = "NftItemTransfer"
        case contractDeploy = "ContractDeploy"
        case subscribe = "Subscribe"
        case unSubscribe = "UnSubscribe"
        case auctionBid = "AuctionBid"
        case nftPurchase = "NftPurchase"
        case depositStake = "DepositStake"
        case withdrawStake = "WithdrawStake"
        case withdrawStakeRequest = "WithdrawStakeRequest"
        case jettonSwap = "JettonSwap"
        case smartContractExec = "SmartContractExec"
        case electionsRecoverStake = "ElectionsRecoverStake"
        case electionsDepositStake = "ElectionsDepositStake"
        case domainRenew = "DomainRenew"
        case inscriptionTransfer = "InscriptionTransfer"
        case inscriptionMint = "InscriptionMint"
        case unknown = "Unknown"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public enum Status: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case ok = "ok"
        case failed = "failed"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var type: ModelType
    public var status: Status
    public var tonTransfer: TonTransferAction?
    public var extraCurrencyTransfer: ExtraCurrencyTransferAction?
    public var contractDeploy: ContractDeployAction?
    public var jettonTransfer: JettonTransferAction?
    public var jettonBurn: JettonBurnAction?
    public var jettonMint: JettonMintAction?
    public var nftItemTransfer: NftItemTransferAction?
    public var subscribe: SubscriptionAction?
    public var unSubscribe: UnSubscriptionAction?
    public var auctionBid: AuctionBidAction?
    public var nftPurchase: NftPurchaseAction?
    public var purchaseAction: PurchaseAction?
    public var depositStake: DepositStakeAction?
    public var withdrawStake: WithdrawStakeAction?
    public var withdrawStakeRequest: WithdrawStakeRequestAction?
    public var electionsDepositStake: ElectionsDepositStakeAction?
    public var electionsRecoverStake: ElectionsRecoverStakeAction?
    public var jettonSwap: JettonSwapAction?
    public var smartContractExec: SmartContractAction?
    public var domainRenew: DomainRenewAction?
    public var inscriptionTransfer: InscriptionTransferAction?
    public var inscriptionMint: InscriptionMintAction?
    public var simplePreview: ActionSimplePreview
    public var baseTransactions: [String]

    public init(type: ModelType, status: Status, tonTransfer: TonTransferAction? = nil, extraCurrencyTransfer: ExtraCurrencyTransferAction? = nil, contractDeploy: ContractDeployAction? = nil, jettonTransfer: JettonTransferAction? = nil, jettonBurn: JettonBurnAction? = nil, jettonMint: JettonMintAction? = nil, nftItemTransfer: NftItemTransferAction? = nil, subscribe: SubscriptionAction? = nil, unSubscribe: UnSubscriptionAction? = nil, auctionBid: AuctionBidAction? = nil, nftPurchase: NftPurchaseAction? = nil, purchaseAction: PurchaseAction? = nil, depositStake: DepositStakeAction? = nil, withdrawStake: WithdrawStakeAction? = nil, withdrawStakeRequest: WithdrawStakeRequestAction? = nil, electionsDepositStake: ElectionsDepositStakeAction? = nil, electionsRecoverStake: ElectionsRecoverStakeAction? = nil, jettonSwap: JettonSwapAction? = nil, smartContractExec: SmartContractAction? = nil, domainRenew: DomainRenewAction? = nil, inscriptionTransfer: InscriptionTransferAction? = nil, inscriptionMint: InscriptionMintAction? = nil, simplePreview: ActionSimplePreview, baseTransactions: [String]) {
        self.type = type
        self.status = status
        self.tonTransfer = tonTransfer
        self.extraCurrencyTransfer = extraCurrencyTransfer
        self.contractDeploy = contractDeploy
        self.jettonTransfer = jettonTransfer
        self.jettonBurn = jettonBurn
        self.jettonMint = jettonMint
        self.nftItemTransfer = nftItemTransfer
        self.subscribe = subscribe
        self.unSubscribe = unSubscribe
        self.auctionBid = auctionBid
        self.nftPurchase = nftPurchase
        self.purchaseAction = purchaseAction
        self.depositStake = depositStake
        self.withdrawStake = withdrawStake
        self.withdrawStakeRequest = withdrawStakeRequest
        self.electionsDepositStake = electionsDepositStake
        self.electionsRecoverStake = electionsRecoverStake
        self.jettonSwap = jettonSwap
        self.smartContractExec = smartContractExec
        self.domainRenew = domainRenew
        self.inscriptionTransfer = inscriptionTransfer
        self.inscriptionMint = inscriptionMint
        self.simplePreview = simplePreview
        self.baseTransactions = baseTransactions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case status
        case tonTransfer = "TonTransfer"
        case extraCurrencyTransfer = "ExtraCurrencyTransfer"
        case contractDeploy = "ContractDeploy"
        case jettonTransfer = "JettonTransfer"
        case jettonBurn = "JettonBurn"
        case jettonMint = "JettonMint"
        case nftItemTransfer = "NftItemTransfer"
        case subscribe = "Subscribe"
        case unSubscribe = "UnSubscribe"
        case auctionBid = "AuctionBid"
        case nftPurchase = "NftPurchase"
        case purchaseAction = "PurchaseAction"
        case depositStake = "DepositStake"
        case withdrawStake = "WithdrawStake"
        case withdrawStakeRequest = "WithdrawStakeRequest"
        case electionsDepositStake = "ElectionsDepositStake"
        case electionsRecoverStake = "ElectionsRecoverStake"
        case jettonSwap = "JettonSwap"
        case smartContractExec = "SmartContractExec"
        case domainRenew = "DomainRenew"
        case inscriptionTransfer = "InscriptionTransfer"
        case inscriptionMint = "InscriptionMint"
        case simplePreview = "simple_preview"
        case baseTransactions = "base_transactions"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(tonTransfer, forKey: .tonTransfer)
        try container.encodeIfPresent(extraCurrencyTransfer, forKey: .extraCurrencyTransfer)
        try container.encodeIfPresent(contractDeploy, forKey: .contractDeploy)
        try container.encodeIfPresent(jettonTransfer, forKey: .jettonTransfer)
        try container.encodeIfPresent(jettonBurn, forKey: .jettonBurn)
        try container.encodeIfPresent(jettonMint, forKey: .jettonMint)
        try container.encodeIfPresent(nftItemTransfer, forKey: .nftItemTransfer)
        try container.encodeIfPresent(subscribe, forKey: .subscribe)
        try container.encodeIfPresent(unSubscribe, forKey: .unSubscribe)
        try container.encodeIfPresent(auctionBid, forKey: .auctionBid)
        try container.encodeIfPresent(nftPurchase, forKey: .nftPurchase)
        try container.encodeIfPresent(purchaseAction, forKey: .purchaseAction)
        try container.encodeIfPresent(depositStake, forKey: .depositStake)
        try container.encodeIfPresent(withdrawStake, forKey: .withdrawStake)
        try container.encodeIfPresent(withdrawStakeRequest, forKey: .withdrawStakeRequest)
        try container.encodeIfPresent(electionsDepositStake, forKey: .electionsDepositStake)
        try container.encodeIfPresent(electionsRecoverStake, forKey: .electionsRecoverStake)
        try container.encodeIfPresent(jettonSwap, forKey: .jettonSwap)
        try container.encodeIfPresent(smartContractExec, forKey: .smartContractExec)
        try container.encodeIfPresent(domainRenew, forKey: .domainRenew)
        try container.encodeIfPresent(inscriptionTransfer, forKey: .inscriptionTransfer)
        try container.encodeIfPresent(inscriptionMint, forKey: .inscriptionMint)
        try container.encode(simplePreview, forKey: .simplePreview)
        try container.encode(baseTransactions, forKey: .baseTransactions)
    }
}

