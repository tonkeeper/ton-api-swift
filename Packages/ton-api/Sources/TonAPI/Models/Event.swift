//
// Event.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Event: Codable, JSONEncodable, Hashable {

    public var eventId: String
    public var timestamp: Int64
    public var actions: [Action]
    public var valueFlow: [ValueFlow]
    /** scam */
    public var isScam: Bool
    public var lt: Int64
    /** Event is not finished yet. Transactions still happening */
    public var inProgress: Bool
    public var progress: Float

    public init(eventId: String, timestamp: Int64, actions: [Action], valueFlow: [ValueFlow], isScam: Bool, lt: Int64, inProgress: Bool, progress: Float) {
        self.eventId = eventId
        self.timestamp = timestamp
        self.actions = actions
        self.valueFlow = valueFlow
        self.isScam = isScam
        self.lt = lt
        self.inProgress = inProgress
        self.progress = progress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventId = "event_id"
        case timestamp
        case actions
        case valueFlow = "value_flow"
        case isScam = "is_scam"
        case lt
        case inProgress = "in_progress"
        case progress
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventId, forKey: .eventId)
        try container.encode(timestamp, forKey: .timestamp)
        try container.encode(actions, forKey: .actions)
        try container.encode(valueFlow, forKey: .valueFlow)
        try container.encode(isScam, forKey: .isScam)
        try container.encode(lt, forKey: .lt)
        try container.encode(inProgress, forKey: .inProgress)
        try container.encode(progress, forKey: .progress)
    }
}

