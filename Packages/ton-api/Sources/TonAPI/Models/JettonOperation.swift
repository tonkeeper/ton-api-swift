//
// JettonOperation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct JettonOperation: Codable, JSONEncodable, Hashable {

    public enum Operation: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case transfer = "transfer"
        case mint = "mint"
        case burn = "burn"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    public var operation: Operation
    public var utime: Int64
    public var lt: Int64
    public var transactionHash: String
    public var source: AccountAddress?
    public var destination: AccountAddress?
    public var amount: String
    public var jetton: JettonPreview
    public var traceId: String
    public var queryId: String
    public var payload: AnyCodable?

    public init(operation: Operation, utime: Int64, lt: Int64, transactionHash: String, source: AccountAddress? = nil, destination: AccountAddress? = nil, amount: String, jetton: JettonPreview, traceId: String, queryId: String, payload: AnyCodable? = nil) {
        self.operation = operation
        self.utime = utime
        self.lt = lt
        self.transactionHash = transactionHash
        self.source = source
        self.destination = destination
        self.amount = amount
        self.jetton = jetton
        self.traceId = traceId
        self.queryId = queryId
        self.payload = payload
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case operation
        case utime
        case lt
        case transactionHash = "transaction_hash"
        case source
        case destination
        case amount
        case jetton
        case traceId = "trace_id"
        case queryId = "query_id"
        case payload
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(operation, forKey: .operation)
        try container.encode(utime, forKey: .utime)
        try container.encode(lt, forKey: .lt)
        try container.encode(transactionHash, forKey: .transactionHash)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(destination, forKey: .destination)
        try container.encode(amount, forKey: .amount)
        try container.encode(jetton, forKey: .jetton)
        try container.encode(traceId, forKey: .traceId)
        try container.encode(queryId, forKey: .queryId)
        try container.encodeIfPresent(payload, forKey: .payload)
    }
}

