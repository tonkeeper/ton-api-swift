//
// Subscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Subscription: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable, CaseIterableDefaultsLast {
        case notReady = "not_ready"
        case active = "active"
        case suspended = "suspended"
        case cancelled = "cancelled"
        case unknownDefaultOpenApi = "unknown_default_open_api"
    }
    /** type of subscription */
    public var type: String
    public var status: Status
    /** payment period in seconds */
    public var period: Int64
    /** common identifier */
    public var subscriptionId: String
    public var paymentPerPeriod: Price
    public var wallet: AccountAddress
    public var nextChargeAt: Int64
    public var metadata: Metadata
    public var address: String?
    public var beneficiary: AccountAddress?
    public var admin: AccountAddress?

    public init(type: String, status: Status, period: Int64, subscriptionId: String, paymentPerPeriod: Price, wallet: AccountAddress, nextChargeAt: Int64, metadata: Metadata, address: String? = nil, beneficiary: AccountAddress? = nil, admin: AccountAddress? = nil) {
        self.type = type
        self.status = status
        self.period = period
        self.subscriptionId = subscriptionId
        self.paymentPerPeriod = paymentPerPeriod
        self.wallet = wallet
        self.nextChargeAt = nextChargeAt
        self.metadata = metadata
        self.address = address
        self.beneficiary = beneficiary
        self.admin = admin
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type
        case status
        case period
        case subscriptionId = "subscription_id"
        case paymentPerPeriod = "payment_per_period"
        case wallet
        case nextChargeAt = "next_charge_at"
        case metadata
        case address
        case beneficiary
        case admin
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(type, forKey: .type)
        try container.encode(status, forKey: .status)
        try container.encode(period, forKey: .period)
        try container.encode(subscriptionId, forKey: .subscriptionId)
        try container.encode(paymentPerPeriod, forKey: .paymentPerPeriod)
        try container.encode(wallet, forKey: .wallet)
        try container.encode(nextChargeAt, forKey: .nextChargeAt)
        try container.encode(metadata, forKey: .metadata)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(beneficiary, forKey: .beneficiary)
        try container.encodeIfPresent(admin, forKey: .admin)
    }
}

