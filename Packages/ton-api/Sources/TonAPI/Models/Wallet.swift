//
// Wallet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Wallet: Codable, JSONEncodable, Hashable {

    public var address: String
    public var isWallet: Bool
    public var balance: Int64
    public var stats: WalletStats
    public var plugins: [WalletPlugin]
    public var status: AccountStatus
    /** unix timestamp */
    public var lastActivity: Int64
    public var name: String?
    public var icon: String?
    @available(*, deprecated, message: "This property is deprecated.")
    public var getMethods: [String]
    public var isSuspended: Bool?
    public var signatureDisabled: Bool?
    public var interfaces: [String]?
    public var lastLt: Int64

    public init(address: String, isWallet: Bool, balance: Int64, stats: WalletStats, plugins: [WalletPlugin], status: AccountStatus, lastActivity: Int64, name: String? = nil, icon: String? = nil, getMethods: [String], isSuspended: Bool? = nil, signatureDisabled: Bool? = nil, interfaces: [String]? = nil, lastLt: Int64) {
        self.address = address
        self.isWallet = isWallet
        self.balance = balance
        self.stats = stats
        self.plugins = plugins
        self.status = status
        self.lastActivity = lastActivity
        self.name = name
        self.icon = icon
        self.getMethods = getMethods
        self.isSuspended = isSuspended
        self.signatureDisabled = signatureDisabled
        self.interfaces = interfaces
        self.lastLt = lastLt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case isWallet = "is_wallet"
        case balance
        case stats
        case plugins
        case status
        case lastActivity = "last_activity"
        case name
        case icon
        case getMethods = "get_methods"
        case isSuspended = "is_suspended"
        case signatureDisabled = "signature_disabled"
        case interfaces
        case lastLt = "last_lt"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(isWallet, forKey: .isWallet)
        try container.encode(balance, forKey: .balance)
        try container.encode(stats, forKey: .stats)
        try container.encode(plugins, forKey: .plugins)
        try container.encode(status, forKey: .status)
        try container.encode(lastActivity, forKey: .lastActivity)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encode(getMethods, forKey: .getMethods)
        try container.encodeIfPresent(isSuspended, forKey: .isSuspended)
        try container.encodeIfPresent(signatureDisabled, forKey: .signatureDisabled)
        try container.encodeIfPresent(interfaces, forKey: .interfaces)
        try container.encode(lastLt, forKey: .lastLt)
    }
}

